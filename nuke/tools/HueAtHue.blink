// https://github.com/hotgluebanjo
// https://github.com/calvinsilly
//
// Uses linear interpolation instead of a Gaussian basis sum,
// making it fully invertible. Conceptually similar to Tetra.

// 6 hue, 1 wrap, 2 anchor.
#define N_POINTS 9

inline float lerp(float a, float b, float t) {
    return (1.0f - t) * a + t * b;
}

kernel HueAtHue : ImageComputationKernel<ePixelWise> {
    Image<eRead, eAccessPoint, eEdgeClamped> src;
    Image<eWrite> dst;

    param:
        float2 red;
        float2 yel;
        float2 grn;
        float2 cyn;
        float2 blu;
        float2 mag;
        bool invert;

    local:
        float2 curve[N_POINTS];

    void define() {
        defineParam(red, "Red", float2(0.0f));
        defineParam(yel, "Yellow", float2(1.0f / 6.0f));
        defineParam(grn, "Green", float2(2.0f / 6.0f));
        defineParam(cyn, "Cyan", float2(3.0f / 6.0f));
        defineParam(blu, "Blue", float2(4.0f / 6.0f));
        defineParam(mag, "Magenta", float2(5.0f / 6.0f));
        defineParam(invert, "Invert", false);
    }

    void init() {
        // Red point may refer to hues backward from 1=0, where, e.g., 0.9 equals -0.1.
        // Wrapping recenters values past the halfway point so that either input is valid.
        if (red.x < 0.5f && red.y < 0.5f) {
            curve[1] = red;
            curve[7] = red + 1.0f;
        } else if (red.x < 0.5f && red.y >= 0.5f) {
            curve[1] = float2(red.x, red.y - 1.0f);
            curve[7] = float2(red.x + 1.0f, red.y);
        } else if (red.x >= 0.5f && red.y < 0.5f) {
            curve[1] = float2(red.x - 1.0f, red.y);
            curve[7] = float2(red.x, red.y + 1.0f);
        } else {
            curve[1] = red - 1.0f;
            curve[7] = red;
        }

        // Start and end anchors.
        curve[0] = mag - 1.0f;
        curve[8] = yel + 1.0f;

        curve[2] = yel;
        curve[3] = grn;
        curve[4] = cyn;
        curve[5] = blu;
        curve[6] = mag;

        if (invert) {
            for (int i = 0; i < N_POINTS; i += 1) {
                curve[i] = float2(curve[i].y, curve[i].x);
            }
        }
    }

    void process() {
        SampleType(src) input = src();

        float hue = input.x;
        float result = 0.0f;

        if (hue <= curve[0].x) {
            result = curve[0].y;
        } else if (hue >= curve[N_POINTS - 1].x) {
            result = curve[N_POINTS - 1].y;
        } else {
            for (int i = 0; i < N_POINTS - 1; i += 1) {
                if (curve[i].x <= hue && hue < curve[i + 1].x) {
                    float slope = (hue - curve[i].x) / (curve[i + 1].x - curve[i].x);
                    result = lerp(curve[i].y, curve[i + 1].y, slope);
                    break;
                }
            }
        }

        dst() = float4(result, input.y, input.z, input.w);
    }
};
