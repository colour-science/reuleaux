// https://github.com/hotgluebanjo
// https://github.com/calvinsilly
//
// TODO: Less bad (names).

// 6 hue + 1 anchor.
#define N_HUE_POINTS 9

// One per wrapped hue.
#define N_CORNER_POINTS 6

float spow(float x, float p) {
    if (x > 0.0f) {
        return pow(x, p);
    }
    return x;
}

kernel ReuleauxUser : ImageComputationKernel<ePixelWise>
{
    Image<eRead, eAccessPoint, eEdgeClamped> src;
    Image<eWrite> dst;

    param:
        float overall_saturation;
        float overall_value;

        float red_hue;
        float red_saturation;
        float red_value;

        float yel_hue;
        float yel_saturation;
        float yel_value;

        float grn_hue;
        float grn_saturation;
        float grn_value;

        float cyn_hue;
        float cyn_saturation;
        float cyn_value;

        float blu_hue;
        float blu_saturation;
        float blu_value;

        float mag_hue;
        float mag_saturation;
        float mag_value;

        bool invert;

    local:
        float2 hue_curve[N_HUE_POINTS];
        float saturation_curve[N_CORNER_POINTS];
        float value_curve[N_CORNER_POINTS];

    void define() {
        defineParam(overall_saturation, "Overall Saturation", 1.0f);
        defineParam(overall_value, "Overall Value", 0.0f);

        defineParam(red_hue, "Red Hue", 0.0f);
        defineParam(yel_hue, "Yellow Hue", 0.0f);
        defineParam(grn_hue, "Green Hue", 0.0f);
        defineParam(cyn_hue, "Cyan Hue", 0.0f);
        defineParam(blu_hue, "Blue Hue", 0.0f);
        defineParam(mag_hue, "Magenta Hue", 0.0f);

        defineParam(red_saturation, "Red Saturation", 1.0f);
        defineParam(yel_saturation, "Yellow Saturation", 1.0f);
        defineParam(grn_saturation, "Green Saturation", 1.0f);
        defineParam(cyn_saturation, "Cyan Saturation", 1.0f);
        defineParam(blu_saturation, "Blue Saturation", 1.0f);
        defineParam(mag_saturation, "Magenta Saturation", 1.0f);

        defineParam(red_value, "Red Value", 0.0f);
        defineParam(yel_value, "Yellow Value", 0.0f);
        defineParam(grn_value, "Green Value", 0.0f);
        defineParam(cyn_value, "Cyan Value", 0.0f);
        defineParam(blu_value, "Blue Value", 0.0f);
        defineParam(mag_value, "Magenta Value", 0.0f);

        defineParam(invert, "Invert", false);
    }

    void init() {
        // Start and end anchors.
        hue_curve[0] = float2(5.0f / 6.0f, mag_hue + 5.0f / 6.0f) - 1.0f;
        hue_curve[8] = float2(1.0f / 6.0f, yel_hue + 1.0f / 6.0f) + 1.0f;

        hue_curve[1] = float2(0.0f, red_hue);
        hue_curve[2] = float2(1.0f / 6.0f, yel_hue + 1.0f / 6.0f);
        hue_curve[3] = float2(2.0f / 6.0f, grn_hue + 2.0f / 6.0f);
        hue_curve[4] = float2(3.0f / 6.0f, cyn_hue + 3.0f / 6.0f);
        hue_curve[5] = float2(4.0f / 6.0f, blu_hue + 4.0f / 6.0f);
        hue_curve[6] = float2(5.0f / 6.0f, mag_hue + 5.0f / 6.0f);
        hue_curve[7] = float2(1.0f, red_hue + 1.0f);

        if (invert) {
            for (int i = 0; i < N_HUE_POINTS; i += 1) {
                hue_curve[i] = float2(hue_curve[i].y, hue_curve[i].x);
            }
        }

        saturation_curve[0] = red_saturation;
        saturation_curve[1] = yel_saturation;
        saturation_curve[2] = grn_saturation;
        saturation_curve[3] = cyn_saturation;
        saturation_curve[4] = blu_saturation;
        saturation_curve[5] = mag_saturation;

        value_curve[0] = red_value;
        value_curve[1] = yel_value;
        value_curve[2] = grn_value;
        value_curve[3] = cyn_value;
        value_curve[4] = blu_value;
        value_curve[5] = mag_value;
    }

    float lerp(float a, float b, float t) {
        return (1.0f - t) * a + t * b;
    }

    float tent_basis(float x, float s) {
        return max(1.0f - fabs(x / s), 0.0f);
    }

    float wrap(float x) {
        if (x < -0.5f) {
            return x + 1.0f;
        } else if (x > 0.5f) {
            return x - 1.0f;
        } else {
            return x;
        }
    }

    void process() {
        SampleType(src) input = src();

        float hue = input.x;
        float saturation = input.y;
        float value = input.z;
        float hue_result = 0.0f;

        if (hue <= hue_curve[0].x) {
            hue_result = hue_curve[0].y;
        } else if (hue >= hue_curve[N_HUE_POINTS - 1].x) {
            hue_result = hue_curve[N_HUE_POINTS - 1].y;
        } else {
            for (int i = 0; i < N_HUE_POINTS - 1; i += 1) {
                if (hue_curve[i].x <= hue && hue < hue_curve[i + 1].x) {
                    float slope = (hue - hue_curve[i].x) / (hue_curve[i + 1].x - hue_curve[i].x);
                    hue_result = lerp(hue_curve[i].y, hue_curve[i + 1].y, slope);
                    break;
                }
            }
        }

        float saturation_hue_factor = 0.0f;
        float value_hue_factor = 0.0f;

        // Everything could be handled by linear interpolation.
        // Just not going to duplicate all that and TODO blinkscript doesn't like
        // functions with array arguments.
        for (int i = 0; i < N_CORNER_POINTS; i += 1) {
            float cx = float(i) / 6.0f;
            float hue_s = invert ? hue : hue_result;
            float basis = tent_basis(wrap(hue_s - cx), 1.0f / 6.0f);

            saturation_hue_factor += basis * saturation_curve[i];
            value_hue_factor += basis * value_curve[i];
        }

        saturation_hue_factor *= overall_saturation;

        if (!invert) {
            saturation_hue_factor = 1.0f / saturation_hue_factor;
        }

        float saturation_result = spow(saturation, saturation_hue_factor);

        float saturation_s = invert ? saturation : saturation_result;
        float value_factor = max(1.0f - saturation_s * (value_hue_factor + overall_value), 1e-6f);
        float value_result;

        if (invert) {
            value_result = value * value_factor;
        } else {
            value_result = value / value_factor;
        }

        dst() = float4(hue_result, saturation_result, value_result, input.w);
    }
};
