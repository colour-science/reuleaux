// https://github.com/hotgluebanjo
// https://github.com/calvinsilly

// 6 hue, 1 wrap, 2 anchor.
#define N_HUE_POINTS 9

// 6 hue, 1 wrap.
#define N_CORNER_POINTS 7

#define EPS 1e-6f

inline float spow(float x, float p) {
    if (x > 0.0f) {
        return pow(x, p);
    }
    return x;
}

inline float lerp(float a, float b, float t) {
    return (1.0f - t) * a + t * b;
}

float interp_linear(float2 *pts, int n_pts, float x) {
    if (x <= pts[0].x) return pts[0].y;
    if (x >= pts[n_pts - 1].x) return pts[n_pts - 1].y;

    // Lower of the indices x is between.
    int i = 0;
    for (; i < n_pts - 1; i += 1) {
        // x == x[i]. No need to interpolate.
        if (fabs(pts[i].x - x) < EPS) return pts[i].y;

        if (pts[i].x < x && x < pts[i + 1].x) break;
    }

    float slope = (x - pts[i].x) / (pts[i + 1].x - pts[i].x);

    return lerp(pts[i].y, pts[i + 1].y, slope);
}

kernel ReuleauxUser : ImageComputationKernel<ePixelWise> {
    Image<eRead, eAccessPoint, eEdgeClamped> src;
    Image<eWrite> dst;

    param:
        float overall_sat;
        float overall_val;

        float red_hue;
        float red_sat;
        float red_val;

        float yel_hue;
        float yel_sat;
        float yel_val;

        float grn_hue;
        float grn_sat;
        float grn_val;

        float cyn_hue;
        float cyn_sat;
        float cyn_val;

        float blu_hue;
        float blu_sat;
        float blu_val;

        float mag_hue;
        float mag_sat;
        float mag_val;

        bool invert;

    void define() {
        defineParam(overall_sat, "Overall Saturation", 1.0f);
        defineParam(overall_val, "Overall Value", 0.0f);

        defineParam(red_hue, "Red Hue", 0.0f);
        defineParam(yel_hue, "Yellow Hue", 0.0f);
        defineParam(grn_hue, "Green Hue", 0.0f);
        defineParam(cyn_hue, "Cyan Hue", 0.0f);
        defineParam(blu_hue, "Blue Hue", 0.0f);
        defineParam(mag_hue, "Magenta Hue", 0.0f);

        defineParam(red_sat, "Red Saturation", 1.0f);
        defineParam(yel_sat, "Yellow Saturation", 1.0f);
        defineParam(grn_sat, "Green Saturation", 1.0f);
        defineParam(cyn_sat, "Cyan Saturation", 1.0f);
        defineParam(blu_sat, "Blue Saturation", 1.0f);
        defineParam(mag_sat, "Magenta Saturation", 1.0f);

        defineParam(red_val, "Red Value", 0.0f);
        defineParam(yel_val, "Yellow Value", 0.0f);
        defineParam(grn_val, "Green Value", 0.0f);
        defineParam(cyn_val, "Cyan Value", 0.0f);
        defineParam(blu_val, "Blue Value", 0.0f);
        defineParam(mag_val, "Magenta Value", 0.0f);

        defineParam(invert, "Invert", false);
    }

    void process() {
        // `init` doesn't work with procedures that take pointers.
        // It's worth making `process` messier for the sake of simplifying
        // the rest of the code and matching the DCTL.

        SampleType(src) hsv = src();

        float hue = hsv.x;
        float sat = hsv.y;
        float val = hsv.z;

        float2 hue_curve[N_HUE_POINTS];

        // Start and end anchors.
        hue_curve[0] = float2(5.0f / 6.0f, mag_hue + 5.0f / 6.0f) - 1.0f;
        hue_curve[8] = float2(1.0f / 6.0f, yel_hue + 1.0f / 6.0f) + 1.0f;

        // Wrapping anchor.
        hue_curve[1] = float2(0.0f, red_hue);
        hue_curve[7] = float2(1.0f, red_hue + 1.0f);

        hue_curve[2] = float2(1.0f / 6.0f, yel_hue + 1.0f / 6.0f);
        hue_curve[3] = float2(2.0f / 6.0f, grn_hue + 2.0f / 6.0f);
        hue_curve[4] = float2(3.0f / 6.0f, cyn_hue + 3.0f / 6.0f);
        hue_curve[5] = float2(4.0f / 6.0f, blu_hue + 4.0f / 6.0f);
        hue_curve[6] = float2(5.0f / 6.0f, mag_hue + 5.0f / 6.0f);

        if (invert) {
            for (int i = 0; i < N_HUE_POINTS; i += 1) {
                hue_curve[i] = float2(hue_curve[i].y, hue_curve[i].x);
            }
        }

        float2 sat_curve[N_CORNER_POINTS] = {
            {0.0f,        red_sat},
            {1.0f / 6.0f, yel_sat},
            {2.0f / 6.0f, grn_sat},
            {3.0f / 6.0f, cyn_sat},
            {4.0f / 6.0f, blu_sat},
            {5.0f / 6.0f, mag_sat},
            {1.0f,        red_sat}
        };

        float2 val_curve[N_CORNER_POINTS] = {
            {0.0f,        red_val},
            {1.0f / 6.0f, yel_val},
            {2.0f / 6.0f, grn_val},
            {3.0f / 6.0f, cyn_val},
            {4.0f / 6.0f, blu_val},
            {5.0f / 6.0f, mag_val},
            {1.0f,        red_val}
        };

        float hue_result = interp_linear(hue_curve, N_HUE_POINTS, hue);
        float hue_switch = invert ? hue : hue_result;

        float sat_factor = interp_linear(sat_curve, N_CORNER_POINTS, hue_switch) * overall_sat;
        float val_factor = interp_linear(val_curve, N_CORNER_POINTS, hue_switch) + overall_val;

        if (!invert) {
            sat_factor = 1.0f / sat_factor;
        }

        float sat_result = spow(sat, sat_factor);
        float sat_switch = invert ? sat : sat_result;

        val_factor = max(1.0f - sat_switch * val_factor, EPS);
        float val_result;

        if (invert) {
            val_result = val * val_factor;
        } else {
            val_result = val / val_factor;
        }

        dst() = float4(hue_result, sat_result, val_result, hsv.w);
    }
};
